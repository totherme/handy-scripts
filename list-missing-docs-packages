#!/bin/bash -eu

# This began when I noticed that `info bash` on ubuntu just showed me the bash
# manpage, while `info bash` on slackware showed me a beautiful reference
# manual:
#
# https://www.gnu.org/software/bash/manual/html_node/index.html
#
# I noticed that when I was hacking bash on my slackware machine, if I got into
# trouble, I'd check the reference manual. In the same event on my ubuntu
# machine, I'd google it, and rely on stackoverflow answers. There are two
# things wrong with this:
#
# - I personally find it less satisfying than reading the manual. I'm more
#   likely to feel like I understand something in context when I read it from
#   the manual.
# - Sometimes I'm offline. For example, on a train underground.
#
# Fortunately, you can solve this problem on ubuntu with a simple
# `apt install bash-doc`
#
# But what other docs packages am I missing? This little script will tell me.

main() {
  list_of_installed_packages | \
    doc_package_of | \
    filter_out_fictional_packages | \
    filter_out_installed_packages
}

list_of_installed_packages() {
  zgrep -h ' install ' /var/log/dpkg.log* | \
    awk '{print $4}' | \
    sort | \
    uniq | \
    awk -F: '{print $1}'
}

doc_package_of() {
  while read -r package ; do
    echo "${package}-doc"
  done
}

filter_out_fictional_packages() {
  while read -r package ; do
    if package_exists "$package" ; then
      echo "$package"
    fi
  done
}

filter_out_installed_packages() {
  while read -r package ; do
    if ! package_is_installed "$package" ; then
      echo "$package"
    fi
  done
}

package_exists() {
  if [[ -z $1 ]] ; then
    fail "package_exists requires 1 argument"
  fi
  package=$1
  apt-cache search "$package" | grep "$package" > /dev/null
}

package_is_installed() {
  if [[ -z $1 ]] ; then
    fail "package_is_installed requires 1 argument"
  fi
  package=$1
  list_of_installed_packages | grep "$package" > /dev/null
}

fail() {
  print "$@"
  exit 1
}

main
